#!/bin/bash

# Makes Git version information available in the TeX document
#
# This script extracts information from Git.
# Then it prints TeX commands that define macros to include that information.
#
# To use:
#
#   1. Run the script and pipe the output to a TeX file (as part of the build
#      process)
#   2. Include that TeX file in your document
#   3. Use the defined macros to include Git information in the document
#
# Adapted from
# https://thorehusfeldt.net/2011/05/13/including-git-revision-identifiers-in-latex/
#

# Pass in a list of directories as parameters
#
# This script assumes that the document source is in a subdirectory of the
# repository, and that only that only changes to that directory should be
# included in the Git log.
# So this script takes a list of subdirectories as parameters.
#
# Most of the time, the only thing you'll want to pass in is
# the current directory: '.'
#
# Passing in nothing is also valid.
# It just won't pass any paths to the respective Git commands.
#
# See the build process (Makefile) for how exactly this script is being called.
#
DOC_SOURCE_DIRS=$*

git_single_stat() {
    local FORMAT=$1
    git log -1 --date=short --format="format:$FORMAT" $DOC_SOURCE_DIRS
}

cat <<-END_STR
%%% DO NOT EDIT BY HAND
%%% File generated by $0

\\gdef\\engineversion{$(pdflatex --version | head -n1)}
\\gdef\\graphvizversion{$(dot -V 2>&1)}
\\gdef\\gnuplotversion{$(gnuplot --version)}

\\gdef\\GitAbrHash{$(git_single_stat "%h")}
\\gdef\\GitRefs{$(git_single_stat "%d")}
\\gdef\\GitAuthorName{$(git_single_stat "%an")}
\\gdef\\GitAuthorDate{$(git_single_stat "%ad")}
\\gdef\\GitTags{$(git tag --points-at HEAD | sed 's/_/\\_/g')}
\\gdef\\GitNumDirty{$(git status --porcelain $DOC_SOURCE_DIRS | wc -l)}
END_STR
